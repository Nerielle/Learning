@using Newtonsoft.Json
@model Dal.Article

@{
    ViewBag.Title = "AddNewArticle";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>AddNewArticle</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Article</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="form-group">
                <label for="inputTitle" class="col-m-2 control-label">Title</label>
                <div class="col-m-10">
                    <input class="form-control" id="inputTitle" data-bind="value: article.title" >
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label for="inputDescription" class="col-m-2 control-label">Description</label>
                <div class="col-m-10">
                    <textarea class="form-control" rows="3" id="inputDescription" data-bind="text: article.description"></textarea>
                </div>
            </div>
            <div class="form-group">
                <label for="inputContent" class="col-m-2 control-label">Content</label>
                <div class="col-m-10">
                    <textarea class="form-control" rows="20" id="inputContent" data-bind="text: article.content"></textarea>
                    @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
      

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" click=""/>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    
@JavaScript.AddCustom("ViewModels/add-new-article-page-view-model.js")
    <script type="text/javascript">
         @{
             IHtmlString articleObj = Html.Raw(JsonConvert.SerializeObject(Model));
         }
        Blog.viewmodels.newArticlePage.bindArticle(@Html.Raw(articleObj));
    </script>
}
